services:
  kafka-controller:
    image: apache/kafka:3.9.1
    container_name: kafka-controller
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - f1-network

  kafka-broker: # TODO add more than 1 broker
    image: apache/kafka:3.9.1
    container_name: kafka-broker
    depends_on:
      - kafka-controller
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "kafka-broker:19092", "--list"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - f1-network

  kafka-init:
    image: apache/kafka:3.9.1
    container_name: kafka-init
    depends_on:
      kafka-broker:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker:19092 --create --if-not-exists --topic f1-telemetry-lap --replication-factor 1 --partitions 3
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker:19092 --create --if-not-exists --topic f1-telemetry-car-telemetry --replication-factor 1 --partitions 3
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker:19092 --create --if-not-exists --topic f1-telemetry-participants --replication-factor 1 --partitions 3
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker:19092 --create --if-not-exists --topic f1-telemetry-lobby-info --replication-factor 1 --partitions 3
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker:19092 --create --if-not-exists --topic speed-aggregation --replication-factor 1 --partitions 1
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker:19092 --create --if-not-exists --topic rpm-aggregation --replication-factor 1 --partitions 1
      "
    networks:
      - f1-network

  spark-master:
    build:
      context: spark
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_MASTER_HOST=spark-master
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    volumes:
      - ./warehouse:/opt/warehouse
    ports:
      - "81:8080"
    networks:
      - f1-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 1s
      timeout: 5s
      retries: 10

  spark-worker:
    build:
      context: spark
      dockerfile: Dockerfile
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    volumes:
      - ./warehouse:/opt/warehouse
    networks:
      - f1-network
    deploy:
      replicas: 3

  producer:
    container_name: producer
    build:
      context: producer
      dockerfile: Dockerfile
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - UDP_URL=0.0.0.0
      - UDP_PORT=20777
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:19092
      - LAP_TOPIC=f1-telemetry-lap
      - PARTICIPANTS_TOPIC=f1-telemetry-participants
      - LOBBY_INFO_TOPIC=f1-telemetry-lobby-info
      - CAR_TELEMETRY_TOPIC=f1-telemetry-car-telemetry
      - OTEL_EXPORTER_OTLP_ENDPOINT=grpc://otel-collector:4317
    ports:
      - "20777:20777/udp"
    networks:
      - f1-network

  consumer:
    container_name: consumer
    build:
      context: consumer
      dockerfile: Dockerfile
    environment:
      - KAFKA_BROKER=kafka-broker:19092
      - LAP_TOPIC=f1-telemetry-lap
      - CAR_TELEMETRY_TOPIC=f1-telemetry-car-telemetry
      - PARTICIPANTS_TOPIC=f1-telemetry-participants
      - LOBBY_INFO_TOPIC=f1-telemetry-lobby-info
      - SPEED_AGGREGATION_TOPIC=speed-aggregation
      - RPM_AGGREGATION_TOPIC=rpm-aggregation
      - WAREHOUSE_PATH=/opt/warehouse
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=none
      - OTEL_METRICS_EXPORTER=none
      - OTEL_RESOURCE_ATTRIBUTES=service.name=f1-telemetry-consumer,telemetry.sdk.language=scala
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      spark-master:
        condition: service_healthy
      otel-collector:
        condition: service_started
    volumes:
      - ./warehouse:/opt/warehouse
    networks:
      - f1-network

  socket:
    container_name: socket
    build:
      context: socket
      dockerfile: Dockerfile
    environment:
      - RUST_LOG=debug
      - SOCKET_URL=0.0.0.0
      - SOCKET_PORT=8080
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:19092
      - SPEED_AGGREGATION_TOPIC=speed-aggregation
      - RPM_AGGREGATION_TOPIC=rpm-aggregation
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    networks:
      - f1-network

  api:
    container_name: api
    build:
      context: api
      dockerfile: Dockerfile
    environment:
      - API_PORT=3000
      - WAREHOUSE_PATH=/opt/warehouse
    volumes:
      - ./warehouse:/opt/warehouse
    networks:
      - f1-network

  nginx:
    container_name: nginx
    build:
      context: web/f1-telemetry
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - socket
    networks:
      - f1-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.136.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel/otel-collector-config.yml:/etc/otel-collector-config.yml
    depends_on:
      - jaeger
    networks:
      - f1-network

  jaeger:
    image: jaegertracing/all-in-one:1.73.0
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "82:16686"
    networks:
      - f1-network

networks:
  f1-network:
    driver: bridge
